generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DEV")
}

model Admin {
  userId Int  @id @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("admin")
}

model Board {
  id        Int    @id @default(autoincrement())
  boardName String @unique @map("board_name")
  posts     Post[]

  @@map("board")
}

model CafeteriaMenu {
  campus   String
  servedAt DateTime @map("served_at")
  data     Json?

  @@id([campus, servedAt])
  @@map("cafeteria_menu")
}

model ChangePassword {
  token       String
  userId      Int      @id @map("user_id")
  requestedAt DateTime @map("requested_at")
  user        User     @relation(fields: [userId], references: [id])

  @@index([token], name: "change_password_token")
  @@map("change_password")
}

model Comment {
  id             Int      @id @default(autoincrement())
  body           String
  uploadedAt     DateTime @map("uploaded_at")
  userId         Int      @map("user_id")
  postId         Int      @map("post_id")
  randomNickname String   @map("random_nickname")
  post           Post     @relation(fields: [postId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("comment")
}

model CoverageMajor {
  coverageCollege        String?                @map("coverage_college")
  name                   String
  code                   String                 @id
  coverage_major_lecture CoverageMajorLecture[] @relation("coverage_majorTocoverage_major_lecture")

  @@map("coverage_major")
}

model CoverageMajorLecture {
  lectureId      String        @map("lecture_id")
  major_code     String
  lecture        Lecture       @relation(fields: [lectureId], references: [id])
  coverage_major CoverageMajor @relation("coverage_majorTocoverage_major_lecture", fields: [major_code], references: [code])

  @@id([lectureId, major_code])
  @@index([lectureId], name: "coverage_major_lecture_lecture_id")
  @@index([major_code], name: "coverage_major_lecture_major_code")
  @@map("coverage_major_lecture")
}

model Device {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  deviceId     String    @unique @map("device_id")
  pushToken    String    @map("push_token")
  registeredAt DateTime  @map("registered_at")
  activatedAt  DateTime? @map("activated_at")
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("device")
}

model File {
  id         Int        @id @default(autoincrement())
  uuid       String     @unique
  fileName   String     @map("file_name")
  mime       String
  uploadedAt DateTime   @map("uploaded_at")
  postFiles  PostFile[]
  tipFiles   TipFile[]

  @@map("file")
}

model Inquiry {
  id         Int       @id @default(autoincrement())
  email      String?
  title      String
  body       String
  answer     String?
  userId     Int?      @map("user_id")
  uploadedAt DateTime  @map("uploaded_at")
  answeredAt DateTime? @map("answered_at")
  user       User?     @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("inquiry")
}

model Lecture {
  id                    String                 @id
  year                  Int?
  semester              String?
  campus                String?
  college               String?
  major                 String?
  grade                 Int?
  credit                Int?
  course                String?
  section               String?
  code                  String?
  name                  String?
  professor             String?
  schedule              String?
  building              Int?
  room                  String?
  note                  String?
  coverageMajorLectures CoverageMajorLecture[]
  periods               Period[]

  @@map("lecture")
}

model LiveChat {
  id             Int      @default(autoincrement())
  message        String
  createdAt      DateTime @map("created_at")
  userId         Int      @map("user_id")
  randomNickname String   @map("random_nickname")
  user           User     @relation(fields: [userId], references: [id])

  @@id([id, userId])
  @@index([userId], name: "user_id")
  @@map("live_chat")
}

model NoticeNotificationsSubscription {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  noticeKey    String   @map("notice_key")
  subscribedAt DateTime @map("subscribed_at")
  user         User     @relation(fields: [userId], references: [id])

  @@index([noticeKey], name: "notice_notifications_subscription_notice_key")
  @@index([userId], name: "user_id")
  @@map("notice_notifications_subscription")
}

model PendingUser {
  id             Int      @id @default(autoincrement())
  portalId       String   @unique @map("portal_id")
  password       String
  nickname       String   @unique
  randomNickname String   @map("random_nickname")
  registeredAt   DateTime @default(now()) @map("registered_at")
  token          String   @unique

  @@map("pending_user")
}

model Period {
  lectureId String  @map("lecture_id")
  day       String
  startH    Int     @map("start_h")
  startM    Int     @map("start_m")
  endH      Int     @map("end_h")
  endM      Int     @map("end_m")
  lecture   Lecture @relation(fields: [lectureId], references: [id])

  @@id([lectureId, day, startH, startM, endH, endM])
  @@index([lectureId], name: "period_lecture_id")
  @@map("period")
}

model Post {
  id             Int        @id @default(autoincrement())
  boardId        Int        @map("board_id")
  title          String
  body           String
  userId         Int        @map("user_id")
  randomNickname String     @map("random_nickname")
  uploadedAt     DateTime   @map("uploaded_at")
  editedAt       DateTime?  @map("edited_at")
  isDeleted      Boolean?   @default(false) @map("is_deleted")
  board          Board      @relation(fields: [boardId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
  comments       Comment[]
  postFiles      PostFile[]
  postLikes      PostLike[]

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map("post")
}

model PostFile {
  id     Int  @id @default(autoincrement())
  postId Int  @map("post_id")
  fileId Int  @map("file_id")
  file   File @relation(fields: [fileId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@index([fileId], name: "file_id")
  @@index([postId], name: "post_id")
  @@map("post_file")
}

model PostLike {
  userId Int  @map("user_id")
  postId Int  @map("post_id")
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("post_like")
}

model Tip {
  id             Int            @id @default(autoincrement())
  topic          TipTopic?
  userId         Int            @map("user_id")
  title          String
  body           String
  randomNickname String         @map("random_nickname")
  isArchived     Boolean?       @default(false) @map("is_archived")
  isRemoved      Boolean?       @default(false) @map("is_removed")
  createdAt      DateTime?      @map("created_at")
  editedAt       DateTime?      @map("edited_at")
  user           User           @relation(fields: [userId], references: [id])
  tip_bookmark   tip_bookmark[] @relation("tipTotip_bookmark")
  tipComments    TipComment[]
  tipFiles       TipFile[]
  tipLikes       TipLike[]
  tipViews       TipView[]

  @@index([userId], name: "user_id")
  @@map("tip")
}

model TipComment {
  id             Int       @id @default(autoincrement())
  userId         Int?      @map("user_id")
  tipId          Int?      @map("tip_id")
  body           String
  randomNickname String    @map("random_nickname")
  isRemoved      Boolean?  @default(false) @map("is_removed")
  createdAt      DateTime? @map("created_at")
  editedAt       DateTime? @map("edited_at")
  tip            Tip?      @relation(fields: [tipId], references: [id])
  user           User?     @relation(fields: [userId], references: [id])

  @@index([tipId], name: "tip_id")
  @@index([userId], name: "user_id")
  @@map("tip_comment")
}

model TipFile {
  id        Int       @id @default(autoincrement())
  tipId     Int       @map("tip_id")
  fileId    Int       @map("file_id")
  createdAt DateTime? @map("created_at")
  file      File      @relation(fields: [fileId], references: [id])
  tip       Tip       @relation(fields: [tipId], references: [id])

  @@index([fileId], name: "file_id")
  @@index([tipId], name: "tip_id")
  @@map("tip_file")
}

model TipLike {
  id     Int  @default(autoincrement())
  userId Int  @map("user_id")
  tipId  Int  @map("tip_id")
  tip    Tip  @relation(fields: [tipId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([id, userId, tipId])
  @@index([tipId], name: "tip_id")
  @@index([userId], name: "user_id")
  @@map("tip_like")
}

model TipView {
  id     Int  @default(autoincrement())
  userId Int  @map("user_id")
  tipId  Int  @map("tip_id")
  tip    Tip  @relation(fields: [tipId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([id, userId, tipId])
  @@index([tipId], name: "tip_id")
  @@index([userId], name: "user_id")
  @@map("tip_view")
}

model User {
  id                               Int                               @id @default(autoincrement())
  portalId                         String                            @unique @map("portal_id")
  password                         String
  nickname                         String                            @unique
  randomNickname                   String                            @map("random_nickname")
  registeredAt                     DateTime                          @map("registered_at")
  refreshToken                     String?                           @map("refresh_token")
  admins                           Admin?
  changePasswords                  ChangePassword?
  comments                         Comment[]
  communityComments                CommunityComment[]                @relation("community_commentTouser")
  communityPosts                   CommunityPost[]                   @relation("community_postTouser")
  devices                          Device[]
  inquiries                        Inquiry[]
  liveChats                        LiveChat[]
  noticeNotificationsSubscriptions NoticeNotificationsSubscription[]
  posts                            Post[]
  postLikes                        PostLike[]
  tips                             Tip[]
  tip_bookmark                     tip_bookmark[]                    @relation("tip_bookmarkTouser")
  tipComments                      TipComment[]
  tipLikes                         TipLike[]
  tipViews                         TipView[]

  @@map("user")
}

model tip_bookmark {
  id      Int  @default(autoincrement())
  user_id Int
  tip_id  Int
  tip     Tip  @relation("tipTotip_bookmark", fields: [tip_id], references: [id])
  user    User @relation("tip_bookmarkTouser", fields: [user_id], references: [id])

  @@id([id, user_id, tip_id])
  @@index([tip_id], name: "tip_id")
  @@index([user_id], name: "user_id")
}

model CommunityBoard {
  id             Int             @id @default(autoincrement())
  name           String          @default("")
  isDeleted      Boolean?        @map("is_deleted")
  createdAt      DateTime        @map("created_at")
  communityPosts CommunityPost[]

  @@map("community_board")
}

model CommunityPost {
  id                Int                @id @default(autoincrement())
  boardId           Int                @map("board_id")
  title             String
  body              String
  userId            Int                @map("user_id")
  randomNickname    String             @map("random_nickname")
  postedAt          DateTime           @map("posted_at")
  editedAt          DateTime?          @map("edited_at")
  isDeleted         Boolean?           @default(false) @map("is_deleted")
  communityBoard    CommunityBoard     @relation(fields: [boardId], references: [id])
  user              User               @relation("community_postTouser", fields: [userId], references: [id])
  communityComments CommunityComment[] @relation("community_commentTocommunity_post")

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map("community_post")
}

model CommunityComment {
  id             Int           @id @default(autoincrement())
  postId         Int           @map("post_id")
  userId         Int           @map("user_id")
  randomNickname String        @default("") @map("random_nickname")
  body           String
  commentedAt    DateTime      @map("commented_at")
  isDeleted      Boolean?      @map("is_deleted")
  communityPost  CommunityPost @relation("community_commentTocommunity_post", fields: [postId], references: [id])
  user           User          @relation("community_commentTouser", fields: [userId], references: [id])

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("community_comment")
}

enum TipTopic {
  university
  employment
  newbie
  certificate
  exam
  club
  contest
  etc

  @@map("tip_topic")
}
