generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DEV")
}

model Admin {
  userId Int  @id @map("user_id") @db.UnsignedInt
  user   User @relation(fields: [userId], references: [id])

  @@map("admin")
}

model CafeteriaMenu {
  campus   String   @db.Char(2)
  servedAt DateTime @map("served_at") @db.Date
  data     Json?    @db.Json

  @@id([campus, servedAt])
  @@map("cafeteria_menu")
}

model ChangePassword {
  userId      Int      @id @map("user_id") @db.UnsignedInt
  token       String   @unique @db.VarChar(40)
  requestedAt DateTime @map("requested_at") @db.DateTime(0)
  user        User     @relation(fields: [userId], references: [id])

  @@index([token], name: "change_password_token")
  @@map("change_password")
}

model CoverageMajor {
  coverageCollege       String?                @map("coverage_college") @db.VarChar(50)
  name                  String                 @db.VarChar(50)
  code                  String                 @id @db.VarChar(20)
  coverageMajorLectures CoverageMajorLecture[] @relation("coverage_majorTocoverage_major_lecture")

  @@map("coverage_major")
}

model CoverageMajorLecture {
  lectureId     String        @map("lecture_id") @db.Char(36)
  majorCode     String        @map("major_code") @db.VarChar(20)
  lecture       Lecture       @relation(fields: [lectureId], references: [id])
  coverageMajor CoverageMajor @relation("coverage_majorTocoverage_major_lecture", fields: [majorCode], references: [code])

  @@id([lectureId, majorCode])
  @@index([lectureId], name: "coverage_major_lecture_lecture_id")
  @@index([majorCode], name: "coverage_major_lecture_major_code")
  @@map("coverage_major_lecture")
}

model Lecture {
  id                    String                 @id @db.Char(36)
  year                  Int?                   @db.SmallInt
  semester              String?                @db.VarChar(10)
  campus                String?                @db.VarChar(10)
  college               String?                @db.VarChar(50)
  major                 String?                @db.VarChar(50)
  grade                 Int?                   @db.TinyInt
  credit                Int?                   @db.TinyInt
  course                String?                @db.VarChar(50)
  section               String?                @db.VarChar(50)
  code                  String?                @db.VarChar(50)
  name                  String?                @db.VarChar(100)
  professor             String?                @db.VarChar(50)
  schedule              String?                @db.VarChar(150)
  building              Int?                   @db.SmallInt
  room                  String?                @db.VarChar(20)
  note                  String?                @db.Text
  coverageMajorLectures CoverageMajorLecture[]
  periods               Period[]

  @@map("lecture")
}

model LiveChat {
  id             Int      @default(autoincrement()) @db.Int
  message        String   @db.VarChar(100)
  createdAt      DateTime @map("created_at") @db.DateTime(0)
  userId         Int      @map("user_id") @db.UnsignedInt
  randomNickname String   @map("random_nickname") @db.VarChar(30)
  user           User     @relation(fields: [userId], references: [id])

  @@id([id, userId])
  @@index([userId], name: "user_id")
  @@map("live_chat")
}

model NoticeNotificationsSubscription {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  userId       Int      @map("user_id") @db.UnsignedInt
  noticeKey    String   @map("notice_key") @db.VarChar(255)
  subscribedAt DateTime @map("subscribed_at") @db.DateTime(0)
  user         User     @relation(fields: [userId], references: [id])

  @@index([noticeKey], name: "notice_notifications_subscription_notice_key")
  @@index([userId], name: "user_id")
  @@map("notice_notifications_subscription")
}

model PendingUser {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  portalId       String   @unique @map("portal_id") @db.VarChar(320)
  password       String   @db.Char(60)
  nickname       String   @unique @db.VarChar(30)
  randomNickname String   @map("random_nickname") @db.VarChar(30)
  joinedAt       DateTime @map("joined_at") @db.DateTime(0)
  token          String   @unique @db.VarChar(40)

  @@map("pending_user")
}

model Period {
  lectureId String  @map("lecture_id") @db.Char(36)
  day       String  @db.Char(3)
  startH    Int     @map("start_h") @db.TinyInt
  startM    Int     @map("start_m") @db.TinyInt
  endH      Int     @map("end_h") @db.TinyInt
  endM      Int     @map("end_m") @db.TinyInt
  lecture   Lecture @relation(fields: [lectureId], references: [id])

  @@id([lectureId, day, startH, startM, endH, endM])
  @@index([lectureId], name: "period_lecture_id")
  @@map("period")
}

model User {
  id                               Int                               @id @default(autoincrement()) @db.UnsignedInt
  portalId                         String                            @unique @map("portal_id") @db.VarChar(320)
  password                         String                            @db.Char(60)
  nickname                         String                            @unique @db.VarChar(30)
  randomNickname                   String                            @map("random_nickname") @db.VarChar(30)
  joinedAt                         DateTime                          @map("joined_at") @db.DateTime(0)
  refreshToken                     String?                           @map("refresh_token") @db.VarChar(500)
  admins                           Admin?
  changePassword                   ChangePassword?
  communityBoards                  CommunityBoard[]                  @relation("community_boardTouser")
  communityBoardCandidates         CommunityBoardCandidate[]         @relation("community_board_candidateTouser")
  communityBoardCandidateVotes     CommunityBoardCandidateVote[]     @relation("community_board_candidate_voteTouser")
  communityBoardPins               CommunityBoardPin[]               @relation("community_board_pinTouser")
  communityComments                CommunityComment[]                @relation("community_commentTouser")
  communityPosts                   CommunityPost[]                   @relation("community_postTouser")
  communityPostBookmarks           CommunityPostBookmark[]           @relation("community_post_bookmarkTouser")
  communityPostLikes               CommunityPostLike[]               @relation("community_post_likeTouser")
  communitySubcomments             CommunitySubcomment[]             @relation("community_subcommentTouser")
  liveChats                        LiveChat[]
  noticeNotificationsSubscriptions NoticeNotificationsSubscription[]
  pushes                           Push[]                            @relation("pushTouser")

  @@map("user")
}

model CommunityBoard {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  name               String              @default("") @db.VarChar(50)
  description        String?             @db.VarChar(100)
  priority           Int                 @default(0) @db.UnsignedSmallInt
  isDeleted          Boolean             @default(false) @map("is_deleted") @db.TinyInt
  createdBy          Int                 @map("created_by") @db.UnsignedInt
  createdAt          DateTime            @map("created_at") @db.DateTime(0)
  activeAt           DateTime?           @map("active_at") @db.DateTime(0)
  user               User                @relation("community_boardTouser", fields: [createdBy], references: [id])
  communityBoardPins CommunityBoardPin[] @relation("community_boardTocommunity_board_pin")
  communityPosts     CommunityPost[]

  @@index([createdBy], name: "created_by")
  @@map("community_board")
}

model CommunityPost {
  id                     Int                     @id @default(autoincrement()) @db.UnsignedInt
  boardId                Int                     @map("board_id") @db.UnsignedInt
  userId                 Int                     @map("user_id") @db.UnsignedInt
  title                  String                  @db.VarChar(100)
  body                   String                  @db.Text
  randomNickname         String                  @map("random_nickname") @db.VarChar(30)
  likesCount             Int                     @default(0) @map("likes_count") @db.UnsignedMediumInt
  commentsCount          Int                     @default(0) @map("comments_count") @db.UnsignedMediumInt
  bookmarksCount         Int                     @default(0) @map("bookmarks_count") @db.UnsignedMediumInt
  postedAt               DateTime                @map("posted_at") @db.DateTime(0)
  editedAt               DateTime?               @map("edited_at") @db.DateTime(0)
  isDeleted              Boolean                 @default(false) @map("is_deleted") @db.TinyInt
  communityBoard         CommunityBoard          @relation(fields: [boardId], references: [id])
  user                   User                    @relation("community_postTouser", fields: [userId], references: [id])
  communityComments      CommunityComment[]      @relation("community_commentTocommunity_post")
  communityPostBookmarks CommunityPostBookmark[] @relation("community_postTocommunity_post_bookmark")
  communityPostLikes     CommunityPostLike[]     @relation("community_postTocommunity_post_like")
  communitySubcomments   CommunitySubcomment[]   @relation("community_postTocommunity_subcomment")

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map("community_post")
}

model CommunityComment {
  id                   Int                   @id @default(autoincrement()) @db.UnsignedInt
  postId               Int                   @map("post_id") @db.UnsignedInt
  userId               Int                   @map("user_id") @db.UnsignedInt
  randomNickname       String                @default("") @map("random_nickname") @db.VarChar(30)
  body                 String                @db.Text
  commentedAt          DateTime              @map("commented_at") @db.DateTime(0)
  isDeleted            Boolean               @default(false) @map("is_deleted") @db.TinyInt
  communityPost        CommunityPost         @relation("community_commentTocommunity_post", fields: [postId], references: [id])
  user                 User                  @relation("community_commentTouser", fields: [userId], references: [id])
  communitySubcomments CommunitySubcomment[] @relation("community_commentTocommunity_subcomment")

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("community_comment")
}

model CommunityPostLike {
  userId        Int           @map("user_id") @db.UnsignedInt
  postId        Int           @map("post_id") @db.UnsignedInt
  communityPost CommunityPost @relation("community_postTocommunity_post_like", fields: [postId], references: [id])
  user          User          @relation("community_post_likeTouser", fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("community_post_like")
}

model CommunityPostBookmark {
  userId        Int           @map("user_id") @db.UnsignedInt
  postId        Int           @map("post_id") @db.UnsignedInt
  communityPost CommunityPost @relation("community_postTocommunity_post_bookmark", fields: [postId], references: [id])
  user          User          @relation("community_post_bookmarkTouser", fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("community_post_bookmark")
}

model CommunitySubcomment {
  id               Int              @id @default(autoincrement()) @db.UnsignedInt
  userId           Int              @map("user_id") @db.UnsignedInt
  postId           Int              @map("post_id") @db.UnsignedInt
  commentId        Int              @map("comment_id") @db.UnsignedInt
  randomNickname   String           @default("") @map("random_nickname") @db.VarChar(30)
  body             String           @db.Text
  subcommentedAt   DateTime         @map("subcommented_at") @db.DateTime(0)
  isDeleted        Boolean          @default(false) @map("is_deleted") @db.TinyInt
  communityComment CommunityComment @relation("community_commentTocommunity_subcomment", fields: [commentId], references: [id])
  communityPost    CommunityPost    @relation("community_postTocommunity_subcomment", fields: [postId], references: [id])
  user             User             @relation("community_subcommentTouser", fields: [userId], references: [id])

  @@index([commentId], name: "comment_id")
  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("community_subcomment")
}

model Push {
  userId        Int       @map("user_id") @db.UnsignedInt
  expoPushToken String    @id @default("") @map("expo_push_token") @db.VarChar(255)
  registeredAt  DateTime  @map("registered_at") @db.DateTime(0)
  activeAt      DateTime? @map("active_at") @db.DateTime(0)
  user          User      @relation("pushTouser", fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("push")
}

model CommunityBoardCandidate {
  id                           Int                           @id @default(autoincrement()) @db.UnsignedInt
  name                         String                        @default("") @db.VarChar(50)
  description                  String?                       @db.VarChar(100)
  createdBy                    Int                           @map("created_by") @db.UnsignedInt
  createdAt                    DateTime                      @map("created_at") @db.DateTime(0)
  user                         User                          @relation("community_board_candidateTouser", fields: [createdBy], references: [id])
  communityBoardCandidateVotes CommunityBoardCandidateVote[] @relation("community_board_candidateTocommunity_board_candidate_vote")

  @@index([createdBy], name: "created_by")
  @@map("community_board_candidate")
}

model CommunityBoardCandidateVote {
  boardCandidateId        Int                     @map("board_candidate_id") @db.UnsignedInt
  userId                  Int                     @map("user_id") @db.UnsignedInt
  communityBoardCandidate CommunityBoardCandidate @relation("community_board_candidateTocommunity_board_candidate_vote", fields: [boardCandidateId], references: [id])
  user                    User                    @relation("community_board_candidate_voteTouser", fields: [userId], references: [id])

  @@id([boardCandidateId, userId])
  @@index([userId], name: "user_id")
  @@map("community_board_candidate_vote")
}

model CommunityBoardPin {
  userId         Int            @map("user_id") @db.UnsignedInt
  boardId        Int            @map("board_id") @db.UnsignedInt
  communityBoard CommunityBoard @relation("community_boardTocommunity_board_pin", fields: [boardId], references: [id])
  user           User           @relation("community_board_pinTouser", fields: [userId], references: [id])

  @@id([userId, boardId])
  @@index([boardId], name: "board_id")
  @@map("community_board_pin")
}
